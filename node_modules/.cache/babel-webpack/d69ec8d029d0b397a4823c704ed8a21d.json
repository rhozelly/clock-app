{"ast":null,"code":"import _asyncToGenerator from \"C:/Project/clocked/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../core/services/authentication.service\";\nimport * as i4 from \"@angular/material/card\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/form-field\";\nimport * as i7 from \"@angular/material/input\";\nimport * as i8 from \"@angular/material/button\";\n\nfunction UserCreateComponent_mat_error_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" The username and password were not recognized \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport class UserCreateComponent {\n  constructor(fb, route, router, authService) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.authService = authService;\n    this.loginInvalid = false;\n    this.formSubmitAttempt = false;\n    this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/dashboard';\n    this.form = this.fb.group({\n      email: ['', Validators.email],\n      password: ['', Validators.required]\n    });\n  }\n\n  ngOnInit() {}\n\n  onSubmit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b;\n\n      _this.loginInvalid = false;\n      _this.formSubmitAttempt = false;\n\n      if (_this.form.valid) {\n        try {\n          const email = (_a = _this.form.get('email')) === null || _a === void 0 ? void 0 : _a.value;\n          const password = (_b = _this.form.get('password')) === null || _b === void 0 ? void 0 : _b.value;\n          yield _this.authService.createUserWithEmailAndPassword(email, password);\n        } catch (err) {\n          _this.loginInvalid = true;\n        }\n      } else {\n        _this.formSubmitAttempt = true;\n      }\n    })();\n  }\n\n}\n\nUserCreateComponent.ɵfac = function UserCreateComponent_Factory(t) {\n  return new (t || UserCreateComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthenticationService));\n};\n\nUserCreateComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UserCreateComponent,\n  selectors: [[\"app-user-create\"]],\n  decls: 16,\n  vars: 2,\n  consts: [[3, \"formGroup\", \"ngSubmit\"], [4, \"ngIf\"], [1, \"full-width-input\"], [\"matInput\", \"\", \"placeholder\", \"Email\", \"formControlName\", \"email\", \"required\", \"\"], [\"matInput\", \"\", \"type\", \"password\", \"placeholder\", \"Password\", \"formControlName\", \"password\", \"required\", \"\"], [\"mat-raised-button\", \"\", \"color\", \"primary\"]],\n  template: function UserCreateComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"mat-card\");\n      i0.ɵɵelementStart(1, \"mat-card-content\");\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function UserCreateComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"h2\");\n      i0.ɵɵtext(4, \"Create User\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, UserCreateComponent_mat_error_5_Template, 2, 0, \"mat-error\", 1);\n      i0.ɵɵelementStart(6, \"mat-form-field\", 2);\n      i0.ɵɵelement(7, \"input\", 3);\n      i0.ɵɵelementStart(8, \"mat-error\");\n      i0.ɵɵtext(9, \" Please provide a valid email address \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"mat-form-field\", 2);\n      i0.ɵɵelement(11, \"input\", 4);\n      i0.ɵɵelementStart(12, \"mat-error\");\n      i0.ɵɵtext(13, \" Please provide a valid password \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"button\", 5);\n      i0.ɵɵtext(15, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(3);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginInvalid);\n    }\n  },\n  directives: [i4.MatCard, i4.MatCardContent, i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i5.NgIf, i6.MatFormField, i7.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i1.RequiredValidator, i6.MatError, i8.MatButton],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJ1c2VyLWNyZWF0ZS5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"sources":["C:\\Project\\clocked\\src\\app\\user-create\\user-create.component.ts","C:\\Project\\clocked\\src\\app\\user-create\\user-create.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AuthenticationService } from '../core/services/authentication.service';\r\n\r\n@Component({\r\n  selector: 'app-user-create',\r\n  templateUrl: './user-create.component.html',\r\n  styleUrls: ['./user-create.component.css']\r\n})\r\nexport class UserCreateComponent implements OnInit {\r\n\r\n  form: FormGroup;\r\n  public loginInvalid = false;\r\n  private formSubmitAttempt = false;\r\n  private returnUrl: string;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private authService: AuthenticationService\r\n  ) { \r\n    this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/dashboard';\r\n    this.form = this.fb.group({\r\n      email: ['', Validators.email],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  async onSubmit(): Promise<void> {\r\n    this.loginInvalid = false;\r\n    this.formSubmitAttempt = false;\r\n    if (this.form.valid) {\r\n      try {\r\n        const email = this.form.get('email')?.value;\r\n        const password = this.form.get('password')?.value;\r\n        await this.authService.createUserWithEmailAndPassword(email, password);\r\n      } catch (err) {\r\n        this.loginInvalid = true;\r\n      }\r\n    } else {\r\n      this.formSubmitAttempt = true;\r\n    }\r\n  }\r\n\r\n}\r\n","<mat-card>\r\n    <mat-card-content>\r\n      <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n        <h2>Create User</h2>\r\n        <mat-error *ngIf=\"loginInvalid\">\r\n          The username and password were not recognized\r\n        </mat-error>\r\n        <mat-form-field class=\"full-width-input\">\r\n          <input matInput placeholder=\"Email\" formControlName=\"email\" required>\r\n          <mat-error>\r\n            Please provide a valid email address\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field class=\"full-width-input\">\r\n          <input matInput type=\"password\" placeholder=\"Password\" formControlName=\"password\" required>\r\n          <mat-error>\r\n            Please provide a valid password\r\n          </mat-error>\r\n        </mat-form-field>\r\n        <button mat-raised-button color=\"primary\">Login</button>\r\n      </form>\r\n    </mat-card-content>\r\n  </mat-card>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}