{"ast":null,"code":"import _asyncToGenerator from \"C:/Project/clocked/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Validators } from '@angular/forms';\nimport * as bcrypt from 'bcryptjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../core/services/authentication.service\";\nimport * as i4 from \"../core/services/settings.service\";\nimport * as i5 from \"../core/services/main.service\";\nimport * as i6 from \"@angular/flex-layout/flex\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/icon\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/material/button\";\n\nfunction LoginComponent_mat_error_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" The username and password were not recognized \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(fb, route, router, authService, sett, main) {\n      this.fb = fb;\n      this.route = route;\n      this.router = router;\n      this.authService = authService;\n      this.sett = sett;\n      this.main = main;\n      this.loginInvalid = false;\n      this.formSubmitAttempt = false;\n      this.token = '';\n      this.successful_login = false;\n      this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/dashboard';\n      this.form = this.fb.group({\n        uname: ['', Validators.required],\n        password: ['', Validators.required]\n      });\n    }\n\n    ngOnInit() {\n      // const salt = bcrypt.genSaltSync(5);\n      // let pass = bcrypt.hashSync(this.form.get('password')?.value, salt);\n      this.getTokenLogins(); // const five = this.main.randomNumber(7);\n      // const a = this.main.encrypt('iofortech', 'SXVR702')\n    }\n\n    ngDoCheck() {// this.authService.checkState();\n    }\n\n    getTokenLogins() {\n      this.main.getTokenLogins().subscribe(res => {\n        this.token = res.logins ? res.logins : [];\n      });\n    }\n\n    onSubmit() {\n      var _this = this;\n\n      return _asyncToGenerator(function* () {\n        var _a;\n\n        _this.loginInvalid = false;\n        _this.formSubmitAttempt = false;\n\n        _this.authService.login((_a = _this.form.get('uname')) === null || _a === void 0 ? void 0 : _a.value).subscribe(results => {\n          var _a; //u$3r_3nc\n          //pri^_3nc\n          //r0l3_3nc\n\n\n          if (results.length > 0) {\n            const data = results[0].payload.doc.data();\n            const role = data.role ? data.role.toLowerCase() : '';\n            const id = results[0].payload.doc.id;\n\n            let priv_enc = _this.main.encrypt(data.priv ? data.priv : '', 'pri^_3nc');\n\n            let role_enc = _this.main.encrypt(data.role ? data.role : '', 'r0l3_3nc');\n\n            const user = {\n              pe: priv_enc,\n              re: role_enc\n            };\n            bcrypt.compare((_a = _this.form.get('password')) === null || _a === void 0 ? void 0 : _a.value, data.password, (err, valid) => {\n              const id_encrypted = _this.main.encrypt(id, 'collection-id');\n\n              if (valid) {\n                _this.snack('Login Successful!');\n\n                localStorage.setItem('user', JSON.stringify(user));\n                localStorage.setItem('collection-id', id_encrypted);\n\n                _this.router.navigateByUrl([role] + '/main-dashboard');\n              } else {\n                _this.snack('Invalid Password.');\n\n                _this.loginInvalid = true;\n\n                _this.router.navigateByUrl('/login');\n              }\n            });\n          }\n        });\n      })();\n    } //     if (results.length > 0) {\n    //       const data = results[0].payload.doc.data();\n    //       const id = results[0].payload.doc.id;\n    //       const id_encrypted = this.main.encrypt(id, 'collection-id');\n    //       let encrypted = SHA256(data).toString();\n    //       localStorage.setItem('user', encrypted);\n    //       pass_decrypted = this.main.decrypt(data.password, this.token);\n    //       this.successful_login = this.form.get('password')?.value === pass_decrypted;\n    //       if (this.successful_login) {\n    //         this.snack('Login Successful!');\n    //         // localStorage.setItem('user', JSON.stringify(user));\n    //         localStorage.setItem('collection-id', id_encrypted);\n    //         this.router.navigateByUrl('/dashboard');\n    //       } else {\n    //         this.snack('Invalid Password.');\n    //         this.loginInvalid = true;\n    //         this.router.navigateByUrl('/login');\n    //       }\n    //     } else {\n    //       this.snack('Invalid Username.');\n    //       this.router.navigateByUrl('/login');\n    //       this.loginInvalid = true;\n    //     }\n    //   });\n    //   // try {\n    //   //   const email = this.form.get('uname')?.value;\n    //   //   const password = this.form.get('password')?.value;\n    //   //   await this.authService.login(email, password);\n    //   //   this.snack('Invalid Credentials');\n    //   // } catch (err) {\n    //   //   this.loginInvalid = true;\n    //   // }\n    // } else {\n    //   this.formSubmitAttempt = true;\n    // }\n\n\n    snack(m) {\n      this.sett.snackbar(m, 'X', 2000, 'orange-snackbar');\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthenticationService), i0.ɵɵdirectiveInject(i4.SettingsService), i0.ɵɵdirectiveInject(i5.MainService));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    decls: 25,\n    vars: 2,\n    consts: [[1, \"login\"], [1, \"login-wrapper\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"login__logo-wrapper\"], [\"src\", \"../../assets/app-images/iofortech-300-logo.png\", \"alt\", \"IOFORTECH\", 1, \"login__logo\"], [\"fxLayout\", \"column\", 1, \"login__form\"], [\"fxFlex\", \"\", \"appearance\", \"outline\", 1, \"login__inputs\"], [\"matInput\", \"\", \"formControlName\", \"uname\", \"placeholder\", \"Placeholder\"], [\"matPrefix\", \"\"], [\"matInput\", \"\", \"formControlName\", \"password\", \"placeholder\", \"password\", \"type\", \"password\", \"required\", \"\"], [4, \"ngIf\"], [\"mat-button\", \"\", 1, \"orange-bg\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1);\n        i0.ɵɵelementStart(2, \"form\", 2);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_2_listener() {\n          return ctx.onSubmit();\n        });\n        i0.ɵɵelementStart(3, \"div\", 3);\n        i0.ɵɵelement(4, \"img\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 5);\n        i0.ɵɵelementStart(6, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(7, \"mat-label\");\n        i0.ɵɵtext(8, \"Login\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"input\", 7);\n        i0.ɵɵelementStart(10, \"mat-icon\", 8);\n        i0.ɵɵtext(11, \"account_circle\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"mat-error\");\n        i0.ɵɵtext(13, \" Please provide a valid username\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(14, \"mat-form-field\", 6);\n        i0.ɵɵelementStart(15, \"mat-label\");\n        i0.ɵɵtext(16, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(17, \"input\", 9);\n        i0.ɵɵelementStart(18, \"mat-icon\", 8);\n        i0.ɵɵtext(19, \"lock\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(20, \"mat-error\");\n        i0.ɵɵtext(21, \" Please provide a valid password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(22, LoginComponent_mat_error_22_Template, 2, 0, \"mat-error\", 10);\n        i0.ɵɵelementStart(23, \"button\", 11);\n        i0.ɵɵtext(24, \"LOGIN\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"formGroup\", ctx.form);\n        i0.ɵɵadvance(20);\n        i0.ɵɵproperty(\"ngIf\", ctx.loginInvalid);\n      }\n    },\n    directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i6.DefaultLayoutDirective, i7.MatFormField, i6.DefaultFlexDirective, i7.MatLabel, i8.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i9.MatIcon, i7.MatPrefix, i7.MatError, i1.RequiredValidator, i10.NgIf, i11.MatButton],\n    styles: [\".login[_ngcontent-%COMP%]{background-image:url(login-bg_1024.d3f558458766dafb4f65.jpg);height:100%;background-position:50%;background-repeat:no-repeat;background-size:cover}.login-wrapper[_ngcontent-%COMP%]{position:absolute;background:#0000;color:#ea7d0e;top:30%;left:40%;right:40%}.login__form[_ngcontent-%COMP%]{margin-top:20px} .mat-form-field-appearance-outline .mat-form-field-outline{color:#ea7d0e} .mat-form-field-appearance-outline .mat-form-field-outline:focus-visible{color:#ea7d0e!important} .mat-form-field-appearance-outline .mat-form-field-outline-thick,  .mat-form-field-label{color:#ea7d0e!important}\"]\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}