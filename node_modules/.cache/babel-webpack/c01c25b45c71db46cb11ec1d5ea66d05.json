{"ast":null,"code":"import _asyncToGenerator from \"C:/Project/clocked/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Validators } from '@angular/forms';\nimport * as bcrypt from 'bcryptjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"../core/services/authentication.service\";\nimport * as i4 from \"../core/services/settings.service\";\nimport * as i5 from \"../core/services/main.service\";\nimport * as i6 from \"@angular/flex-layout/flex\";\nimport * as i7 from \"@angular/material/form-field\";\nimport * as i8 from \"@angular/material/input\";\nimport * as i9 from \"@angular/material/icon\";\nimport * as i10 from \"@angular/common\";\nimport * as i11 from \"@angular/material/button\";\n\nfunction LoginComponent_mat_error_22_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \" The username and password were not recognized \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport class LoginComponent {\n  constructor(fb, route, router, authService, sett, main) {\n    this.fb = fb;\n    this.route = route;\n    this.router = router;\n    this.authService = authService;\n    this.sett = sett;\n    this.main = main;\n    this.loginInvalid = false;\n    this.formSubmitAttempt = false;\n    this.token = '';\n    this.successful_login = false;\n    this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/dashboard';\n    this.form = this.fb.group({\n      uname: ['', Validators.required],\n      password: ['', Validators.required]\n    });\n  }\n\n  ngOnInit() {\n    // const salt = bcrypt.genSaltSync(5);\n    // let pass = bcrypt.hashSync(this.form.get('password')?.value, salt);\n    this.getTokenLogins(); // const five = this.main.randomNumber(7);\n    // const a = this.main.encrypt('iofortech', 'SXVR702')\n  }\n\n  ngDoCheck() {// this.authService.checkState();\n  }\n\n  getTokenLogins() {\n    this.main.getTokenLogins().subscribe(res => {\n      this.token = res.logins ? res.logins : [];\n    });\n  }\n\n  onSubmit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a;\n\n      _this.loginInvalid = false;\n      _this.formSubmitAttempt = false;\n\n      _this.authService.login((_a = _this.form.get('uname')) === null || _a === void 0 ? void 0 : _a.value).subscribe(results => {\n        var _a; //u$3r_3nc\n        //pri^_3nc\n        //r0l3_3nc\n\n\n        if (results.length > 0) {\n          const data = results[0].payload.doc.data();\n          const role = data.role ? data.role.toLowerCase() : '';\n          const id = results[0].payload.doc.id;\n\n          let priv_enc = _this.main.encrypt(data.priv ? data.priv : '', 'pri^_3nc');\n\n          let role_enc = _this.main.encrypt(data.role ? data.role : '', 'r0l3_3nc');\n\n          const user = {\n            pe: priv_enc,\n            re: role_enc\n          };\n          bcrypt.compare((_a = _this.form.get('password')) === null || _a === void 0 ? void 0 : _a.value, data.password, (err, valid) => {\n            const id_encrypted = _this.main.encrypt(id, 'collection-id');\n\n            if (valid) {\n              _this.snack('Login Successful!');\n\n              localStorage.setItem('user', JSON.stringify(user));\n              localStorage.setItem('collection-id', id_encrypted);\n\n              _this.router.navigateByUrl([role] + '/main-dashboard');\n            } else {\n              _this.snack('Invalid Password.');\n\n              _this.loginInvalid = true;\n\n              _this.router.navigateByUrl('/login');\n            }\n          });\n        }\n      });\n    })();\n  } //     if (results.length > 0) {\n  //       const data = results[0].payload.doc.data();\n  //       const id = results[0].payload.doc.id;\n  //       const id_encrypted = this.main.encrypt(id, 'collection-id');\n  //       let encrypted = SHA256(data).toString();\n  //       localStorage.setItem('user', encrypted);\n  //       pass_decrypted = this.main.decrypt(data.password, this.token);\n  //       this.successful_login = this.form.get('password')?.value === pass_decrypted;\n  //       if (this.successful_login) {\n  //         this.snack('Login Successful!');\n  //         // localStorage.setItem('user', JSON.stringify(user));\n  //         localStorage.setItem('collection-id', id_encrypted);\n  //         this.router.navigateByUrl('/dashboard');\n  //       } else {\n  //         this.snack('Invalid Password.');\n  //         this.loginInvalid = true;\n  //         this.router.navigateByUrl('/login');\n  //       }\n  //     } else {\n  //       this.snack('Invalid Username.');\n  //       this.router.navigateByUrl('/login');\n  //       this.loginInvalid = true;\n  //     }\n  //   });\n  //   // try {\n  //   //   const email = this.form.get('uname')?.value;\n  //   //   const password = this.form.get('password')?.value;\n  //   //   await this.authService.login(email, password);\n  //   //   this.snack('Invalid Credentials');\n  //   // } catch (err) {\n  //   //   this.loginInvalid = true;\n  //   // }\n  // } else {\n  //   this.formSubmitAttempt = true;\n  // }\n\n\n  snack(m) {\n    this.sett.snackbar(m, 'X', 2000, 'orange-snackbar');\n  }\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.AuthenticationService), i0.ɵɵdirectiveInject(i4.SettingsService), i0.ɵɵdirectiveInject(i5.MainService));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 25,\n  vars: 2,\n  consts: [[1, \"login\"], [1, \"login-wrapper\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"login__logo-wrapper\"], [\"src\", \"../../assets/app-images/iofortech-300-logo.png\", \"alt\", \"IOFORTECH\", 1, \"login__logo\"], [\"fxLayout\", \"column\", 1, \"login__form\"], [\"fxFlex\", \"\", \"appearance\", \"outline\", 1, \"login__inputs\"], [\"matInput\", \"\", \"formControlName\", \"uname\", \"placeholder\", \"Placeholder\"], [\"matPrefix\", \"\"], [\"matInput\", \"\", \"formControlName\", \"password\", \"placeholder\", \"password\", \"type\", \"password\", \"required\", \"\"], [4, \"ngIf\"], [\"mat-button\", \"\", 1, \"orange-bg\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1);\n      i0.ɵɵelementStart(2, \"form\", 2);\n      i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.onSubmit();\n      });\n      i0.ɵɵelementStart(3, \"div\", 3);\n      i0.ɵɵelement(4, \"img\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"div\", 5);\n      i0.ɵɵelementStart(6, \"mat-form-field\", 6);\n      i0.ɵɵelementStart(7, \"mat-label\");\n      i0.ɵɵtext(8, \"Login\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementStart(10, \"mat-icon\", 8);\n      i0.ɵɵtext(11, \"account_circle\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"mat-error\");\n      i0.ɵɵtext(13, \" Please provide a valid username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"mat-form-field\", 6);\n      i0.ɵɵelementStart(15, \"mat-label\");\n      i0.ɵɵtext(16, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(17, \"input\", 9);\n      i0.ɵɵelementStart(18, \"mat-icon\", 8);\n      i0.ɵɵtext(19, \"lock\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"mat-error\");\n      i0.ɵɵtext(21, \" Please provide a valid password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(22, LoginComponent_mat_error_22_Template, 2, 0, \"mat-error\", 10);\n      i0.ɵɵelementStart(23, \"button\", 11);\n      i0.ɵɵtext(24, \"LOGIN\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(20);\n      i0.ɵɵproperty(\"ngIf\", ctx.loginInvalid);\n    }\n  },\n  directives: [i1.ɵNgNoValidate, i1.NgControlStatusGroup, i1.FormGroupDirective, i6.DefaultLayoutDirective, i7.MatFormField, i6.DefaultFlexDirective, i7.MatLabel, i8.MatInput, i1.DefaultValueAccessor, i1.NgControlStatus, i1.FormControlName, i9.MatIcon, i7.MatPrefix, i7.MatError, i1.RequiredValidator, i10.NgIf, i11.MatButton],\n  styles: [\".login[_ngcontent-%COMP%] {\\r\\n  background-image: url('login-bg_1024.jpg');\\r\\n  height: 100%;\\r\\n  background-position: center;\\r\\n  background-repeat: no-repeat;\\r\\n  background-size: cover;\\r\\n}\\r\\n\\r\\n.login-wrapper[_ngcontent-%COMP%] {\\r\\n  position: absolute;\\r\\n  background: transparent;\\r\\n  color: #ea7d0e;\\r\\n  top: 30%;\\r\\n  left: 40%;\\r\\n  right: 40%;\\r\\n}\\r\\n\\r\\n.login__form[_ngcontent-%COMP%] {\\r\\n  margin-top: 20px;\\r\\n}\\r\\n\\r\\n  .mat-form-field-appearance-outline .mat-form-field-outline {\\r\\n  color: #ea7d0e;\\r\\n}\\r\\n\\r\\n  .mat-form-field-appearance-outline .mat-form-field-outline:focus-visible {\\r\\n  color: #ea7d0e !important;\\r\\n}\\r\\n\\r\\n  .mat-form-field-label {\\r\\n  color: #ea7d0e !important;\\r\\n}\\r\\n\\r\\n  .mat-form-field-appearance-outline .mat-form-field-outline-thick {\\r\\n  color: #ea7d0e !important;\\r\\n}\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxvZ2luLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSwwQ0FBa0U7RUFDbEUsWUFBWTtFQUNaLDJCQUEyQjtFQUMzQiw0QkFBNEI7RUFDNUIsc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0Usa0JBQWtCO0VBQ2xCLHVCQUF1QjtFQUN2QixjQUFjO0VBQ2QsUUFBUTtFQUNSLFNBQVM7RUFDVCxVQUFVO0FBQ1o7O0FBRUE7RUFDRSxnQkFBZ0I7QUFDbEI7O0FBRUE7RUFDRSxjQUFjO0FBQ2hCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UseUJBQXlCO0FBQzNCIiwiZmlsZSI6ImxvZ2luLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubG9naW4ge1xyXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybCgnLi4vLi4vYXNzZXRzL2FwcC1pbWFnZXMvbG9naW4tYmdfMTAyNC5qcGcnKTtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgYmFja2dyb3VuZC1wb3NpdGlvbjogY2VudGVyO1xyXG4gIGJhY2tncm91bmQtcmVwZWF0OiBuby1yZXBlYXQ7XHJcbiAgYmFja2dyb3VuZC1zaXplOiBjb3ZlcjtcclxufVxyXG5cclxuLmxvZ2luLXdyYXBwZXIge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxuICBjb2xvcjogI2VhN2QwZTtcclxuICB0b3A6IDMwJTtcclxuICBsZWZ0OiA0MCU7XHJcbiAgcmlnaHQ6IDQwJTtcclxufVxyXG5cclxuLmxvZ2luX19mb3JtIHtcclxuICBtYXJnaW4tdG9wOiAyMHB4O1xyXG59XHJcblxyXG4vZGVlcC8gLm1hdC1mb3JtLWZpZWxkLWFwcGVhcmFuY2Utb3V0bGluZSAubWF0LWZvcm0tZmllbGQtb3V0bGluZSB7XHJcbiAgY29sb3I6ICNlYTdkMGU7XHJcbn1cclxuXHJcbi9kZWVwLyAubWF0LWZvcm0tZmllbGQtYXBwZWFyYW5jZS1vdXRsaW5lIC5tYXQtZm9ybS1maWVsZC1vdXRsaW5lOmZvY3VzLXZpc2libGUge1xyXG4gIGNvbG9yOiAjZWE3ZDBlICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi9kZWVwLyAubWF0LWZvcm0tZmllbGQtbGFiZWwge1xyXG4gIGNvbG9yOiAjZWE3ZDBlICFpbXBvcnRhbnQ7XHJcbn1cclxuXHJcbi9kZWVwLyAubWF0LWZvcm0tZmllbGQtYXBwZWFyYW5jZS1vdXRsaW5lIC5tYXQtZm9ybS1maWVsZC1vdXRsaW5lLXRoaWNrIHtcclxuICBjb2xvcjogI2VhN2QwZSAhaW1wb3J0YW50O1xyXG59XHJcbiJdfQ== */\"]\n});","map":{"version":3,"sources":["C:\\Project\\clocked\\src\\app\\login\\login.component.ts","C:\\Project\\clocked\\src\\app\\login\\login.component.html"],"names":[],"mappings":"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","sourcesContent":["import {Component, DoCheck, OnInit} from '@angular/core';\r\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\r\nimport {ActivatedRoute, Router} from '@angular/router';\r\nimport {AuthenticationService} from '../core/services/authentication.service';\r\nimport {SettingsService} from \"../core/services/settings.service\";\r\nimport {MainService} from \"../core/services/main.service\";\r\nimport * as bcrypt from 'bcryptjs';\r\n\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.css']\r\n})\r\nexport class LoginComponent implements OnInit, DoCheck {\r\n\r\n  form: FormGroup;\r\n  public loginInvalid = false;\r\n  private formSubmitAttempt = false;\r\n  private returnUrl: string;\r\n  token: any = '';\r\n  successful_login: boolean = false;\r\n\r\n  constructor(\r\n    private fb: FormBuilder,\r\n    private route: ActivatedRoute,\r\n    private router: Router,\r\n    private authService: AuthenticationService,\r\n    private sett: SettingsService,\r\n    private main: MainService,\r\n  ) {\r\n    this.returnUrl = this.route.snapshot.queryParams.returnUrl || '/dashboard';\r\n    this.form = this.fb.group({\r\n      uname: ['', Validators.required],\r\n      password: ['', Validators.required]\r\n    });\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // const salt = bcrypt.genSaltSync(5);\r\n    // let pass = bcrypt.hashSync(this.form.get('password')?.value, salt);\r\n    this.getTokenLogins();\r\n    // const five = this.main.randomNumber(7);\r\n    // const a = this.main.encrypt('iofortech', 'SXVR702')\r\n  }\r\n\r\n  ngDoCheck() {\r\n    // this.authService.checkState();\r\n  }\r\n\r\n  getTokenLogins() {\r\n    this.main.getTokenLogins().subscribe((res: any) => {\r\n      this.token = res.logins ? res.logins : [];\r\n    });\r\n  }\r\n\r\n\r\n  async onSubmit(): Promise<void> {\r\n    this.loginInvalid = false;\r\n    this.formSubmitAttempt = false;\r\n    this.authService.login(this.form.get('uname')?.value).subscribe((results: any) => {\r\n      //u$3r_3nc\r\n      //pri^_3nc\r\n      //r0l3_3nc\r\n      if (results.length > 0) {\r\n        const data = results[0].payload.doc.data();\r\n        const role = data.role ? data.role.toLowerCase() : '';\r\n        const id = results[0].payload.doc.id;\r\n        let priv_enc = this.main.encrypt(data.priv ? data.priv : '', 'pri^_3nc');\r\n        let role_enc = this.main.encrypt(data.role ? data.role : '', 'r0l3_3nc');\r\n        const user = {pe: priv_enc, re: role_enc};\r\n        bcrypt.compare(this.form.get('password')?.value, data.password, (err: any, valid: any) => {\r\n          const id_encrypted = this.main.encrypt(id, 'collection-id');\r\n          if (valid) {\r\n            this.snack('Login Successful!');\r\n            localStorage.setItem('user', JSON.stringify(user));\r\n            localStorage.setItem('collection-id', id_encrypted);\r\n            this.router.navigateByUrl([role] + '/main-dashboard');\r\n          } else {\r\n            this.snack('Invalid Password.');\r\n            this.loginInvalid = true;\r\n            this.router.navigateByUrl('/login');\r\n          }\r\n        })\r\n      }\r\n    });\r\n  }\r\n\r\n  //     if (results.length > 0) {\r\n  //       const data = results[0].payload.doc.data();\r\n  //       const id = results[0].payload.doc.id;\r\n  //       const id_encrypted = this.main.encrypt(id, 'collection-id');\r\n  //       let encrypted = SHA256(data).toString();\r\n  //       localStorage.setItem('user', encrypted);\r\n  //       pass_decrypted = this.main.decrypt(data.password, this.token);\r\n  //       this.successful_login = this.form.get('password')?.value === pass_decrypted;\r\n  //       if (this.successful_login) {\r\n  //         this.snack('Login Successful!');\r\n  //         // localStorage.setItem('user', JSON.stringify(user));\r\n  //         localStorage.setItem('collection-id', id_encrypted);\r\n  //         this.router.navigateByUrl('/dashboard');\r\n  //       } else {\r\n  //         this.snack('Invalid Password.');\r\n  //         this.loginInvalid = true;\r\n  //         this.router.navigateByUrl('/login');\r\n  //       }\r\n  //     } else {\r\n  //       this.snack('Invalid Username.');\r\n  //       this.router.navigateByUrl('/login');\r\n  //       this.loginInvalid = true;\r\n  //     }\r\n  //   });\r\n  //   // try {\r\n  //   //   const email = this.form.get('uname')?.value;\r\n  //   //   const password = this.form.get('password')?.value;\r\n  //   //   await this.authService.login(email, password);\r\n  //   //   this.snack('Invalid Credentials');\r\n  //   // } catch (err) {\r\n  //   //   this.loginInvalid = true;\r\n  //   // }\r\n  // } else {\r\n  //   this.formSubmitAttempt = true;\r\n  // }\r\n\r\n  snack(m: any) {\r\n    this.sett.snackbar(m, 'X', 2000, 'orange-snackbar');\r\n  }\r\n}\r\n","<div class=\"login\">\r\n  <div class=\"login-wrapper\">\r\n    <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\">\r\n      <div class=\"login__logo-wrapper\">\r\n        <img class=\"login__logo\" src=\"../../assets/app-images/iofortech-300-logo.png\" alt=\"IOFORTECH\">\r\n      </div>\r\n      <div class=\"login__form\" fxLayout=\"column\">\r\n        <mat-form-field fxFlex class=\"login__inputs\" appearance=\"outline\">\r\n          <mat-label>Login</mat-label>\r\n          <input matInput formControlName=\"uname\" placeholder=\"Placeholder\">\r\n          <mat-icon matPrefix>account_circle</mat-icon>\r\n          <mat-error> Please provide a valid username</mat-error>\r\n        </mat-form-field>\r\n        <mat-form-field fxFlex class=\"login__inputs\" appearance=\"outline\">\r\n          <mat-label>Password</mat-label>\r\n          <input matInput formControlName=\"password\" placeholder=\"password\" type=\"password\" required>\r\n          <mat-icon matPrefix>lock</mat-icon>\r\n          <mat-error> Please provide a valid password</mat-error>\r\n        </mat-form-field>\r\n        <mat-error *ngIf=\"loginInvalid\">\r\n          The username and password were not recognized\r\n        </mat-error>\r\n        <button mat-button class=\"orange-bg\">LOGIN</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</div>\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}