{"ast":null,"code":"import * as CryptoJS from 'crypto-js';\nimport * as bcrypt from 'bcryptjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/fire/firestore\";\nimport * as i2 from \"@angular/common/http\";\nexport let MainService = /*#__PURE__*/(() => {\n  class MainService {\n    constructor(firestore, http) {\n      this.firestore = firestore;\n      this.http = http;\n      this.logins = 'logins';\n      this.acc = 'account';\n      this.cat = 'categories';\n      this.bloodId = 'blood-type';\n      this.positionId = 'positions';\n      this.roles = 'roles';\n      this.token = 'tokens';\n      this.prof = 'profile';\n      this.att = 'attendance';\n      this.cli = 'clients';\n      this.pri = 'privileges';\n      this.monthNow = new Date().toLocaleString('en-us', {\n        month: 'short'\n      });\n      this.yearNow = new Date().getFullYear();\n    }\n\n    randomNumber(lengthNumber) {\n      let result = '';\n      const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';\n      const charactersLength = characters.length;\n\n      for (let i = 0; i < lengthNumber; i++) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n\n      return result;\n    }\n\n    encrypt(value, key) {\n      return CryptoJS.AES.encrypt(value.trim(), key.trim()).toString();\n    }\n\n    decrypt(value, key) {\n      const val = value ? value : '';\n      const ke = key ? key : '';\n      return CryptoJS.AES.decrypt(val.trim(), ke.trim()).toString(CryptoJS.enc.Utf8);\n    }\n\n    getLogin(id) {\n      return this.firestore.collection(this.logins).doc(id).valueChanges();\n    }\n\n    getPriv() {\n      return this.firestore.collection(this.pri).doc('roles').valueChanges();\n    }\n\n    addAccount(value, id) {\n      const data = {\n        created_at: new Date(),\n        password: value.password,\n        uname: value.uname,\n        priv: value.priv,\n        profile_id: value.profile_id,\n        role: value.role,\n        updated_at: new Date()\n      };\n      return this.firestore.collection(this.acc).doc(id).set(data);\n    }\n\n    addLogin(value, id) {\n      const data = {\n        email: value.email,\n        online: value.online,\n        time_logged_in: value.time_logged_in,\n        tokens: value.tokens\n      };\n      return this.firestore.collection(this.logins).doc(id).set(data);\n    }\n\n    getAccount(id) {\n      return this.firestore.collection(this.acc).doc(id).valueChanges();\n    }\n\n    checkUsername(uname) {\n      return this.firestore.collection(this.acc, ref => ref.where(\"uname\", \"==\", uname)).snapshotChanges();\n    }\n\n    deleteEmployee(id) {\n      let batch = this.firestore.firestore.batch();\n      const account_reference = this.firestore.collection(this.acc).doc(id).ref;\n      batch.delete(account_reference);\n      const profile_reference = this.firestore.collection(this.prof).doc(id).ref;\n      batch.delete(profile_reference);\n      const logins_reference = this.firestore.collection(this.logins).doc(id).ref;\n      batch.delete(logins_reference);\n      const attendance_reference = this.firestore.collection(this.att).doc(id).ref;\n      batch.delete(attendance_reference);\n      return batch.commit();\n    }\n\n    addNewEmployee(id, employee_data, profile_data, logins_data) {\n      const att_first_collection = {\n        recent_date_updated: '',\n        recent_doc_id: ''\n      };\n      const att_second_collection = {\n        date_time: '',\n        time_in: '',\n        time_out: ''\n      };\n      const second_collection = this.yearNow + '-' + this.monthNow.toUpperCase(); //--create batch--\n\n      let batch = this.firestore.firestore.batch(); //--create account collection--\n\n      const account_reference = this.firestore.collection(this.acc).doc(id).ref;\n      batch.set(account_reference, employee_data); //--create profile collection--\n\n      const profile_reference = this.firestore.collection(this.prof).doc(id).ref;\n      batch.set(profile_reference, profile_data); //--create profile collection--\n\n      const logins_reference = this.firestore.collection(this.logins).doc(id).ref;\n      batch.set(logins_reference, logins_data); //--create attendance collection--\n\n      const attendance_reference = this.firestore.collection(this.att).doc(id).ref;\n      batch.set(attendance_reference, att_first_collection);\n      const attendance_second_reference = this.firestore.collection(this.att).doc(id).collection(second_collection).doc().ref;\n      batch.set(attendance_second_reference, att_second_collection);\n      return batch.commit();\n    }\n\n    updateEmployeeAccountandProfile(id, employee_data, profile_data) {\n      let batch = this.firestore.firestore.batch();\n      const account_reference = this.firestore.collection(this.acc).doc(id).ref;\n      batch.update(account_reference, employee_data);\n      const profile_reference = this.firestore.collection(this.prof).doc(id).ref;\n      batch.update(profile_reference, profile_data);\n      return batch.commit();\n    }\n\n    changePassword(value, id) {\n      const salt = bcrypt.genSaltSync(10);\n      const pass = bcrypt.hashSync(value, salt);\n      const data = {\n        password: pass\n      };\n      return this.firestore.collection(this.acc).doc(id).update(data);\n    }\n\n    updateProfileImage(value, id) {\n      const data = {\n        profile_img: value\n      };\n      return this.firestore.collection(this.prof).doc(id).update(data);\n    } // =================  Test\n\n\n    testDelete(id) {\n      return this.firestore.collection(this.acc).doc(id).delete();\n    } // =================  Categories\n\n\n    getTokenLogins() {\n      return this.firestore.collection(this.cat).doc(this.token).valueChanges();\n    }\n\n    getNavigators() {\n      return this.firestore.collection('navigator').valueChanges();\n    }\n\n    getBloodType() {\n      return this.firestore.collection(this.cat).doc(this.bloodId).valueChanges();\n    }\n\n    getPositions() {\n      return this.firestore.collection(this.cat).doc(this.positionId).valueChanges();\n    }\n\n    getRoles() {\n      return this.firestore.collection(this.cat).doc(this.roles).valueChanges();\n    }\n\n    getClients() {\n      return this.firestore.collection(this.cat).doc(this.cli).valueChanges();\n    }\n\n  }\n\n  MainService.ɵfac = function MainService_Factory(t) {\n    return new (t || MainService)(i0.ɵɵinject(i1.AngularFirestore), i0.ɵɵinject(i2.HttpClient));\n  };\n\n  MainService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MainService,\n    factory: MainService.ɵfac,\n    providedIn: 'root'\n  });\n  return MainService;\n})();","map":null,"metadata":{},"sourceType":"module"}